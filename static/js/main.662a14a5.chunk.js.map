{"version":3,"sources":["asset/Neptunus Text Right 1.png","Navbar.js","Asset.js","TransactionSubmitted.js","Notification.js","TransactionForm.js","reducer.js","defaultState.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","publicKey","loginFreighter","src","logo","height","alt","className","href","target","rel","onClick","Asset","asset","value","balance","code","issuer","TransactionSubmitted","transaction","network","id","Notification","notificationContent","notificationColor","closeNotification","useEffect","setTimeout","style","backgroundColor","TransactionForm","state","handleSubmit","handleChange","setMaxBalance","account","amountSend","amountReceive","assetSend","slippage","isNotificationOpen","isSubmitting","listTransaction","onSubmit","type","step","name","onChange","placeholder","min","listAsset","map","readOnly","max","disabled","length","transactionId","reducer","action","payload","defaultState","assetReceive","App","useReducer","dispatch","fetchUrl","url","a","axios","get","response","data","submitXDR","xdr","signTransaction","SERVER_URL","server","StellarSdk","Server","transactionToSubmit","TransactionBuilder","fromXDR","submitTransaction","newId","toLowerCase","isConnected","getPublicKey","getNetwork","then","balances","forEach","asset_type","push","asset_code","asset_issuer","getAmountReceive","amount_receive","params","param","interval","setInterval","clearInterval","Fragment","e","preventDefault","parseFloat","split","newBalance","newCode","newIssuer","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.662a14a5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Neptunus Text Right 1.7e349a79.png\";","import React from \"react\";\r\nimport logo from \"./asset/Neptunus Text Right 1.png\";\r\n\r\nconst Navbar = (props) => {\r\n  let publicKey = null;\r\n  let loginFreighter = null;\r\n  if (props) {\r\n    publicKey = props.publicKey;\r\n    loginFreighter = props.loginFreighter;\r\n  }\r\n  return (\r\n    <header>\r\n      <img src={logo} height=\"45\" alt=\"\" className=\"logo\" />\r\n      {publicKey && (\r\n        <div className=\"account\">\r\n          <a\r\n            href={`https://stellar.expert/explorer/testnet/account/${publicKey}`}\r\n            target=\"_blank\"\r\n            className=\"public-key\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            {publicKey}\r\n          </a>\r\n          <button onClick={loginFreighter} className=\"refresh\">\r\n            Refresh Account\r\n          </button>\r\n        </div>\r\n      )}\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\n\r\nexport const Asset = (asset) => {\r\n  return (\r\n    <>\r\n      <option value={`${asset.balance}_${asset.code}_${asset.issuer}`}>\r\n        {asset.code}\r\n      </option>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nconst TransactionSubmitted = ({ transaction }) => {\r\n  return (\r\n    <li>\r\n      sucessfully transaction with id{\" \"}\r\n      <a\r\n        href={`https://stellar.expert/explorer/${transaction.network}/tx/${transaction.id}`}\r\n        rel=\"noopener noreferrer\"\r\n        target=\"_blank\"\r\n      >\r\n        {transaction.id}\r\n      </a>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default TransactionSubmitted;\r\n","import React, { useEffect } from \"react\";\r\n\r\nconst Notification = ({\r\n  notificationContent,\r\n  notificationColor,\r\n  closeNotification,\r\n}) => {\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      closeNotification();\r\n    }, 10000);\r\n  });\r\n  return (\r\n    <div\r\n      className=\"notification\"\r\n      style={{ backgroundColor: notificationColor }}\r\n    >\r\n      <div className=\"notification-content\">{notificationContent}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Notification;\r\n","import React from \"react\";\r\nimport { Asset } from \"./Asset\";\r\nimport TransactionSubmitted from \"./TransactionSubmitted\";\r\nimport Notification from \"./Notification\";\r\n\r\nconst TransactionForm = (props) => {\r\n  const {\r\n    state,\r\n    handleSubmit,\r\n    handleChange,\r\n    loginFreighter,\r\n    closeNotification,\r\n    setMaxBalance,\r\n  } = props;\r\n  const {\r\n    account,\r\n    amountSend,\r\n    amountReceive,\r\n    assetSend,\r\n    slippage,\r\n    isNotificationOpen,\r\n    notificationContent,\r\n    notificationColor,\r\n    isSubmitting,\r\n    listTransaction,\r\n  } = state;\r\n  return (\r\n    <section>\r\n      <div className=\"section-center\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"transaction-form\">\r\n              <div className=\"form-header\">\r\n                <h1>Swap Asset</h1>\r\n              </div>\r\n              {isNotificationOpen && (\r\n                <Notification\r\n                  notificationColor={notificationColor}\r\n                  notificationContent={notificationContent}\r\n                  closeNotification={closeNotification}\r\n                />\r\n              )}\r\n\r\n              <form onSubmit={handleSubmit}>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-7\">\r\n                    <div className=\"form-group\">\r\n                      <span className=\"form-label\">Amount Send</span>\r\n                      <input\r\n                        type=\"number\"\r\n                        step={0.0000001}\r\n                        id=\"amountSend\"\r\n                        name=\"amountSend\"\r\n                        value={amountSend}\r\n                        onChange={handleChange}\r\n                        placeholder=\"0.0000000\"\r\n                        min=\"0\"\r\n                        className=\"form-control\"\r\n                      />\r\n                      {assetSend && (\r\n                        <span className=\"form-label balance\">\r\n                          Balances:{\" \"}\r\n                          <span className=\"amount\" onClick={setMaxBalance}>\r\n                            {assetSend.balance}\r\n                          </span>{\" \"}\r\n                          {assetSend.code}\r\n                        </span>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-sm-5\">\r\n                    <div className=\"form-group\">\r\n                      <span className=\"form-label\">Asset Send</span>\r\n                      <select\r\n                        name=\"assetSend\"\r\n                        onChange={handleChange}\r\n                        className=\"form-control\"\r\n                      >\r\n                        <option value=\"\">Select Asset Type</option>\r\n\r\n                        {account &&\r\n                          account.listAsset.map((asset) => {\r\n                            return (\r\n                              <Asset\r\n                                key={`${asset.code}_${asset.issuer}`}\r\n                                {...asset}\r\n                              />\r\n                            );\r\n                          })}\r\n                      </select>\r\n                      <span className=\"select-arrow\"></span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-7\">\r\n                    <div className=\"form-group\">\r\n                      <span className=\"form-label\">\r\n                        Estimated Amount Receive\r\n                      </span>\r\n                      <input\r\n                        type=\"number\"\r\n                        step={0.0000001}\r\n                        id=\"amountReceive\"\r\n                        name=\"amountReceive\"\r\n                        value={amountReceive}\r\n                        placeholder=\"Estimate From Amount Send\"\r\n                        className=\"form-control\"\r\n                        readOnly\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-sm-5\">\r\n                    <div className=\"form-group\">\r\n                      <span className=\"form-label\">Asset Receive</span>\r\n                      <select\r\n                        name=\"assetReceive\"\r\n                        onChange={handleChange}\r\n                        className=\"form-control\"\r\n                      >\r\n                        <option value=\"\">Select Asset Type</option>\r\n                        {account &&\r\n                          account.listAsset.map((asset) => {\r\n                            return (\r\n                              <Asset\r\n                                key={`${asset.code}_${asset.issuer}`}\r\n                                {...asset}\r\n                              />\r\n                            );\r\n                          })}\r\n                      </select>\r\n                      <span className=\"select-arrow\"></span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-5 m-auto\">\r\n                    <div className=\"form-group\">\r\n                      <span className=\"form-label\">Slippage Tolerance</span>\r\n                      <input\r\n                        type=\"number\"\r\n                        step={0.01}\r\n                        id=\"slippage\"\r\n                        name=\"slippage\"\r\n                        value={slippage}\r\n                        onChange={handleChange}\r\n                        placeholder=\"value between 0%-100% (default 0.01%)\"\r\n                        max=\"100.00\"\r\n                        min=\"0.00\"\r\n                        className=\"form-control\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                  <div className=\"form-btn\">\r\n                    {account ? (\r\n                      isSubmitting ? (\r\n                        <button\r\n                          type=\"submit\"\r\n                          className=\"submit-btn\"\r\n                          disabled\r\n                          style={{ backgroundColor: \"rgb(5, 1, 255, 0.8)\" }}\r\n                        >\r\n                          Submitting.....\r\n                        </button>\r\n                      ) : (\r\n                        <button type=\"submit\" className=\"submit-btn\">\r\n                          Submit\r\n                        </button>\r\n                      )\r\n                    ) : (\r\n                      <button onClick={loginFreighter} className=\"submit-btn\">\r\n                        Login With Freighter\r\n                      </button>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n\r\n          {listTransaction.length >= 1 && (\r\n            <div className=\"row\">\r\n              <div className=\"list-transaction\">\r\n                <div className=\"list-transaction-header\">\r\n                  List Transaction Submitted\r\n                </div>\r\n                <div className=\"list-transaction-body\">\r\n                  <ul>\r\n                    {listTransaction.map((transaction) => {\r\n                      return (\r\n                        <TransactionSubmitted\r\n                          key={transaction.id}\r\n                          transactionId={transaction}\r\n                        />\r\n                      );\r\n                    })}\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default TransactionForm;\r\n","export const reducer = (state, action) => {\r\n  if (action.type === \"SUCCESS_SUBMIT_XDR\") {\r\n    return {\r\n      ...state,\r\n      isNotificationOpen: true,\r\n      notificationContent: \"Transaction Success\",\r\n      notificationColor: \"#2eb94c\",\r\n      isSubmitting: false,\r\n    };\r\n  } else if (action.type === \"CANNOT_SUBMIT_XDR\") {\r\n    return {\r\n      ...state,\r\n      isNotificationOpen: true,\r\n      notificationContent: \"Transaction Failed\",\r\n      notificationColor: \"#ec5f0d\",\r\n      isSubmitting: false,\r\n    };\r\n  } else if (action.type === \"NO_VALUE\") {\r\n    return {\r\n      ...state,\r\n      isNotificationOpen: true,\r\n      notificationContent:\r\n        \"Please Enter Amount Send, Asset Send, and Asset Receive\",\r\n      notificationColor: \"#ec5f0d\",\r\n    };\r\n  } else if (action.type === \"CHANGE_VALUE\") {\r\n    const { name, value } = action.payload;\r\n    return {\r\n      ...state,\r\n      [name]: value,\r\n    };\r\n  } else if (action.type === \"CLOSE_NOTIFICATION\") {\r\n    return {\r\n      ...state,\r\n      isNotificationOpen: false,\r\n      notificationContent: null,\r\n      notificationColor: null,\r\n    };\r\n  } else if (action.type === \"FREIGHTER_NOT_INSTALLED\") {\r\n    return {\r\n      ...state,\r\n      isNotificationOpen: true,\r\n      notificationContent: \"You Must Install Freighter In Your Browser\",\r\n      notificationColor: \"#ec5f0d\",\r\n    };\r\n  } else if (action.type === \"CANNOT_GET_AMOUNT_RECEIVE\") {\r\n    return {\r\n      ...state,\r\n      isNotificationOpen: true,\r\n      notificationContent: \"Cannot Get Amount Receive\",\r\n      notificationColor: \"#ec5f0d\",\r\n    };\r\n  } else if (action.type === \"CANNOT_GET_LIST_ASSET\") {\r\n    return {\r\n      ...state,\r\n      isNotificationOpen: true,\r\n      notificationContent: \"Cannot Get List Asset\",\r\n      notificationColor: \"#ec5f0d\",\r\n    };\r\n  } else if (action.type === \"CANNOT_LOGIN\") {\r\n    return {\r\n      ...state,\r\n      isNotificationOpen: true,\r\n      notificationContent: \"Cannot Login\",\r\n      notificationColor: \"#ec5f0d\",\r\n    };\r\n  } else if (action.type === \"PROCESSING_TRANSACTION\") {\r\n    return {\r\n      ...state,\r\n      isNotificationOpen: true,\r\n      notificationContent: \"Processing Transaction\",\r\n      notificationColor: \"#ec5f0d\",\r\n      isSubmitting: true,\r\n    };\r\n  }\r\n};\r\n","export const defaultState = {\r\n  account: null,\r\n  assetSend: null,\r\n  assetReceive: null,\r\n  amountSend: \"\",\r\n  amountReceive: \"\",\r\n  slippage: \"\",\r\n  isNotificationOpen: false,\r\n  notificationContent: null,\r\n  notificationColor: null,\r\n  isSubmitting: false,\r\n  listTransaction: [],\r\n};\r\n","import React, { useEffect, useReducer } from \"react\";\r\nimport Navbar from \"./Navbar\";\r\nimport TransactionForm from \"./TransactionForm\";\r\nimport { reducer } from \"./reducer\";\r\nimport { defaultState } from \"./defaultState\";\r\n\r\nimport axios from \"axios\";\r\nimport {\r\n  isConnected,\r\n  getPublicKey,\r\n  getNetwork,\r\n  signTransaction,\r\n} from \"@stellar/freighter-api\";\r\nimport StellarSdk from \"stellar-sdk\";\r\nfunction App() {\r\n  const [state, dispatch] = useReducer(reducer, defaultState);\r\n  const {\r\n    account,\r\n    assetSend,\r\n    assetReceive,\r\n    amountSend,\r\n    amountReceive,\r\n    slippage,\r\n    listTransaction,\r\n  } = state;\r\n  const fetchUrl = async (url) => {\r\n    try {\r\n      const response = await axios.get(url);\r\n      const data = response.data;\r\n      return data;\r\n    } catch (e) {\r\n      return e;\r\n    }\r\n  };\r\n  const submitXDR = async (url) => {\r\n    try {\r\n      const data = await fetchUrl(url);\r\n      let xdr = data.xdr;\r\n      xdr = await signTransaction(xdr, \"TESTNET\");\r\n      let SERVER_URL = \"\";\r\n      if (account.network === \"TESTNET\") {\r\n        SERVER_URL = `https://horizon-testnet.stellar.org`;\r\n      } else if (account.network === \"PUBLIC\") {\r\n        SERVER_URL = `https://horizon.stellar.org`;\r\n      }\r\n      const server = new StellarSdk.Server(SERVER_URL);\r\n      const transactionToSubmit = StellarSdk.TransactionBuilder.fromXDR(\r\n        xdr,\r\n        SERVER_URL\r\n      );\r\n      const response = await server.submitTransaction(transactionToSubmit);\r\n      dispatch({ type: \"SUCCESS_SUBMIT_XDR\" });\r\n      const name = \"listTransaction\";\r\n      const newId = response.id;\r\n      const value = [\r\n        ...listTransaction,\r\n        { network: account.network.toLowerCase(), id: newId },\r\n      ];\r\n      dispatch({ type: \"CHANGE_VALUE\", payload: { name, value } });\r\n    } catch {\r\n      dispatch({ type: \"CANNOT_SUBMIT_XDR\" });\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (account && assetSend && assetReceive && amountSend && amountReceive) {\r\n      dispatch({ type: \"PROCESSING_TRANSACTION\" });\r\n      let url = \"https://wy6y1k.deta.dev/fetch_xdr?\";\r\n      const params = [];\r\n      params.push(`public_key=${account.publicKey}&`);\r\n      params.push(`asset_send_code=${assetSend.code}&`);\r\n      if (assetSend.code !== \"XLM\") {\r\n        params.push(`asset_send_issuer=${assetSend.issuer}&`);\r\n      }\r\n      params.push(`asset_receive_code=${assetReceive.code}&`);\r\n      if (assetReceive.code !== \"XLM\") {\r\n        params.push(`asset_receive_issuer=${assetReceive.issuer}&`);\r\n      }\r\n      params.push(`amount_send=${amountSend}&`);\r\n      if (!slippage) {\r\n        params.push(`slippage=0.01&`);\r\n      } else {\r\n        params.push(`slippage=${slippage}&`);\r\n      }\r\n      if (account.network === \"TESTNET\") {\r\n        params.push(`is_testnet=${true}`);\r\n      } else if (account.network === \"PUBLIC\") {\r\n        params.push(`is_testnet=${false}`);\r\n      }\r\n\r\n      params.forEach((param) => {\r\n        url += param;\r\n      });\r\n      submitXDR(url);\r\n    } else if (account) {\r\n      dispatch({ type: \"NO_VALUE\" });\r\n    }\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const name = e.target.name;\r\n    let value = e.target.value;\r\n    if (\r\n      name === \"amountSend\" ||\r\n      name === \"amountReceive\" ||\r\n      name === \"slippage\"\r\n    ) {\r\n      if (value) {\r\n        value = parseFloat(value);\r\n      } else {\r\n        value = \"\";\r\n      }\r\n    } else if (name === \"assetSend\" || name === \"assetReceive\") {\r\n      const [newBalance, newCode, newIssuer] = value.split(\"_\");\r\n      if (newCode === \"native\") {\r\n        value = { balance: newBalance, code: \"native\" };\r\n      } else {\r\n        value = { balance: newBalance, code: newCode, issuer: newIssuer };\r\n      }\r\n    }\r\n    dispatch({ type: \"CHANGE_VALUE\", payload: { name, value } });\r\n  };\r\n  const closeNotification = () => {\r\n    dispatch({ type: \"CLOSE_NOTIFICATION\" });\r\n  };\r\n  const loginFreighter = async () => {\r\n    if (isConnected()) {\r\n      let publicKey = \"\";\r\n      let network = \"\";\r\n      let url = \"\";\r\n\r\n      try {\r\n        publicKey = await getPublicKey();\r\n        network = await getNetwork();\r\n      } catch (e) {\r\n        dispatch({ type: \"CANNOT_LOGIN\" });\r\n      }\r\n\r\n      if (network === \"TESTNET\") {\r\n        url = `https://horizon-testnet.stellar.org/accounts/${publicKey}`;\r\n      } else if (network === \"PUBLIC\") {\r\n        url = `https://horizon.stellar.org/accounts/${publicKey}`;\r\n      }\r\n\r\n      const balances = await fetchUrl(url).then((data) => data.balances);\r\n      let listAsset = [];\r\n      balances.forEach((asset) => {\r\n        if (asset.asset_type === \"native\") {\r\n          listAsset.push({ balance: asset.balance, code: \"XLM\" });\r\n        } else if (\r\n          asset.asset_type !== \"liquidity_pool_shares\" &&\r\n          asset.balance !== \"0.0000001\"\r\n        ) {\r\n          listAsset.push({\r\n            balance: asset.balance,\r\n            code: asset.asset_code,\r\n            issuer: asset.asset_issuer,\r\n          });\r\n        }\r\n      });\r\n\r\n      const name = \"account\";\r\n      const value = { publicKey, listAsset, network };\r\n\r\n      dispatch({ type: \"CHANGE_VALUE\", payload: { name, value } });\r\n    } else {\r\n      dispatch({ type: \"FREIGHTER_NOT_INSTALLED\" });\r\n    }\r\n  };\r\n\r\n  const setMaxBalance = () => {\r\n    const name = \"amountSend\";\r\n    const value = assetSend.balance;\r\n    dispatch({ type: \"CHANGE_VALUE\", payload: { name, value } });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (account && amountSend && assetSend && assetReceive && amountSend >= 0) {\r\n      const getAmountReceive = async (url) => {\r\n        try {\r\n          const name = \"amountReceive\";\r\n          const value = await fetchUrl(url).then((data) => {\r\n            return data.amount_receive;\r\n          });\r\n          dispatch({\r\n            type: \"CHANGE_VALUE\",\r\n            payload: { name, value },\r\n          });\r\n        } catch {\r\n          dispatch({ type: \"CANNOT_GET_AMOUNT_RECEIVE\" });\r\n        }\r\n      };\r\n      let url = \"https://wy6y1k.deta.dev/fetch_amount_receive?\";\r\n      const params = [];\r\n      params.push(`asset_send_code=${assetSend.code}&`);\r\n      if (assetSend.code !== \"XLM\") {\r\n        params.push(`asset_send_issuer=${assetSend.issuer}&`);\r\n      }\r\n      params.push(`asset_receive_code=${assetReceive.code}&`);\r\n      if (assetReceive.code !== \"XLM\") {\r\n        params.push(`asset_receive_issuer=${assetReceive.issuer}&`);\r\n      }\r\n      params.push(`amount_send=${amountSend}&`);\r\n      if (account.network === \"TESTNET\") {\r\n        params.push(`is_testnet=${true}`);\r\n      } else if (account.network === \"PUBLIC\") {\r\n        params.push(`is_testnet=${false}`);\r\n      }\r\n      params.forEach((param) => {\r\n        url += param;\r\n      });\r\n      getAmountReceive(url);\r\n      const interval = setInterval(() => {\r\n        getAmountReceive(url);\r\n      }, 10000);\r\n\r\n      return () => clearInterval(interval);\r\n    } else if (!amountSend) {\r\n      const name = \"amountReceive\";\r\n      const value = \"\";\r\n      dispatch({\r\n        type: \"CHANGE_VALUE\",\r\n        payload: { name, value },\r\n      });\r\n    }\r\n  }, [amountSend, assetSend, assetReceive, account]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {account ? (\r\n        <Navbar publicKey={account.publicKey} loginFreighter={loginFreighter} />\r\n      ) : (\r\n        <Navbar />\r\n      )}\r\n\r\n      <TransactionForm\r\n        state={state}\r\n        handleSubmit={handleSubmit}\r\n        handleChange={handleChange}\r\n        loginFreighter={loginFreighter}\r\n        closeNotification={closeNotification}\r\n        setMaxBalance={setMaxBalance}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}