{"version":3,"sources":["asset/Neptunus Text Right 1.png","Navbar.js","listAsset.js","Asset.js","Notification.js","TransactionForm.js","reducer.js","defaultState.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","publicKey","src","logo","height","alt","className","listAsset","code","issuer","Asset","asset","value","Notification","notificationContent","notificationColor","closeNotification","useEffect","setTimeout","console","log","style","backgroundColor","TransactionForm","props","state","handleSubmit","handleChange","loginFreighter","amountSend","amountReceive","slippage","isNotificationOpen","onSubmit","type","step","id","name","onChange","placeholder","map","readOnly","max","min","onClick","reducer","action","payload","split","newCode","newIssuer","defaultState","assetSend","assetReceive","xdr","App","useReducer","dispatch","fetchUrl","url","a","axios","get","response","data","submitXDR","signTransaction","SERVER_URL","server","StellarSdk","Server","transactionToSubmit","TransactionBuilder","fromXDR","submitTransaction","error","getPublicKey","getAmountReceive","then","amount_receive","params","forEach","param","interval","setInterval","clearInterval","Fragment","e","preventDefault","target","parseFloat","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b51307b3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Neptunus Text Right 1.7e349a79.png\";","import React from \"react\";\r\nimport logo from \"./asset/Neptunus Text Right 1.png\";\r\n\r\nconst Navbar = ({ publicKey }) => {\r\n  return (\r\n    <header>\r\n      <img src={logo} height=\"45\" alt=\"\" className=\"logo\" />\r\n      {publicKey && <button className=\"account\">{publicKey}</button>}\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","export const listAsset = [\r\n  {\r\n    code: \"XLM\",\r\n    issuer: \"GAZDAUCRI3E7APVYGOPLLS6CMMCCXTUZ6ZKWPOS2EMOOGIGOIQWHWYTQ\",\r\n  },\r\n  {\r\n    code: \"LSP\",\r\n    issuer: \"GAZDAUCRI3E7APVYGOPLLS6CMMCCXTUZ6ZKWPOS2EMOOGIGOIQWHWYTQ\",\r\n  },\r\n  {\r\n    code: \"AQUA\",\r\n    issuer: \"GAZDAUCRI3E7APVYGOPLLS6CMMCCXTUZ6ZKWPOS2EMOOGIGOIQWHWYTQ\",\r\n  },\r\n  {\r\n    code: \"TERN\",\r\n    issuer: \"GAZDAUCRI3E7APVYGOPLLS6CMMCCXTUZ6ZKWPOS2EMOOGIGOIQWHWYTQ\",\r\n  },\r\n  {\r\n    code: \"USDC\",\r\n    issuer: \"GAZDAUCRI3E7APVYGOPLLS6CMMCCXTUZ6ZKWPOS2EMOOGIGOIQWHWYTQ\",\r\n  },\r\n  {\r\n    code: \"YBX\",\r\n    issuer: \"GAZDAUCRI3E7APVYGOPLLS6CMMCCXTUZ6ZKWPOS2EMOOGIGOIQWHWYTQ\",\r\n  },\r\n];\r\n","import React from \"react\";\r\n\r\nexport const Asset = (asset) => {\r\n  return (\r\n    <>\r\n      <option value={`${asset.code}_${asset.issuer}`}>{asset.code}</option>\r\n    </>\r\n  );\r\n};\r\n","import React, { useEffect } from \"react\";\r\n\r\nconst Notification = ({\r\n  notificationContent,\r\n  notificationColor,\r\n  closeNotification,\r\n}) => {\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      closeNotification();\r\n    }, 10000);\r\n  });\r\n  console.log(notificationColor);\r\n  return (\r\n    <div\r\n      className=\"notification\"\r\n      style={{ backgroundColor: notificationColor }}\r\n    >\r\n      <div className=\"notification-content\">{notificationContent}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Notification;\r\n","import React from \"react\";\r\nimport { listAsset } from \"./listAsset\";\r\nimport { Asset } from \"./Asset\";\r\nimport Notification from \"./Notification\";\r\n\r\nexport const TransactionFormContext = React.createContext();\r\n\r\nconst TransactionForm = (props) => {\r\n  const {\r\n    state,\r\n    handleSubmit,\r\n    handleChange,\r\n    loginFreighter,\r\n    closeNotification,\r\n  } = props;\r\n  const {\r\n    publicKey,\r\n    amountSend,\r\n    amountReceive,\r\n    slippage,\r\n    isNotificationOpen,\r\n    notificationContent,\r\n    notificationColor,\r\n  } = state;\r\n  return (\r\n    <section>\r\n      <div className=\"section-center\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"transaction-form\">\r\n              <div className=\"form-header\">\r\n                <h1>Swap Asset</h1>\r\n              </div>\r\n              {/* {isConnected() && <h1>user connected</h1>}\r\n              {publicKey && (\r\n                <>\r\n                  <h1>{publicKey}</h1>\r\n                  <button onClick={logoutFreighter}>logout</button>\r\n                </>\r\n              )}*/}\r\n              {isNotificationOpen && (\r\n                <Notification\r\n                  notificationColor={notificationColor}\r\n                  notificationContent={notificationContent}\r\n                  closeNotification={closeNotification}\r\n                />\r\n              )}\r\n\r\n              <form onSubmit={handleSubmit}>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-7\">\r\n                    <div className=\"form-group\">\r\n                      <span className=\"form-label\">Amount Send</span>\r\n                      <input\r\n                        type=\"number\"\r\n                        step={0.0000001}\r\n                        id=\"amountSend\"\r\n                        name=\"amountSend\"\r\n                        value={amountSend}\r\n                        onChange={handleChange}\r\n                        placeholder=\"0.0000000\"\r\n                        className=\"form-control\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-sm-5\">\r\n                    <div className=\"form-group\">\r\n                      <span className=\"form-label\">Asset Send</span>\r\n                      <select\r\n                        name=\"assetSend\"\r\n                        onChange={handleChange}\r\n                        className=\"form-control\"\r\n                      >\r\n                        <option value=\"\">Select Asset Type</option>\r\n                        {listAsset.map((asset) => {\r\n                          return <Asset key={asset.code} {...asset} />;\r\n                        })}\r\n                      </select>\r\n                      <span className=\"select-arrow\"></span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-7\">\r\n                    <div className=\"form-group\">\r\n                      <span className=\"form-label\">\r\n                        Estimated Amount Receive\r\n                      </span>\r\n                      <input\r\n                        type=\"number\"\r\n                        step={0.0000001}\r\n                        id=\"amountReceive\"\r\n                        name=\"amountReceive\"\r\n                        value={amountReceive}\r\n                        placeholder=\"Estimate From Amount Send\"\r\n                        className=\"form-control\"\r\n                        readOnly\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-sm-5\">\r\n                    <div className=\"form-group\">\r\n                      <span className=\"form-label\">Asset Receive</span>\r\n                      <select\r\n                        name=\"assetReceive\"\r\n                        onChange={handleChange}\r\n                        className=\"form-control\"\r\n                      >\r\n                        <option value=\"\">Select Asset Type</option>\r\n                        {listAsset.map((asset) => {\r\n                          return <Asset key={asset.code} {...asset} />;\r\n                        })}\r\n                      </select>\r\n                      <span className=\"select-arrow\"></span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-5 m-auto\">\r\n                    <div className=\"form-group\">\r\n                      <span className=\"form-label\">Slippage Tolerance</span>\r\n                      <input\r\n                        type=\"number\"\r\n                        step={0.01}\r\n                        id=\"slippage\"\r\n                        name=\"slippage\"\r\n                        value={slippage}\r\n                        onChange={handleChange}\r\n                        placeholder=\"value between 0-1 (default 0.1)\"\r\n                        max=\"1.00\"\r\n                        min=\"0.00\"\r\n                        className=\"form-control\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                  <div className=\"form-btn\">\r\n                    {publicKey ? (\r\n                      <button type=\"submit\" className=\"submit-btn\">\r\n                        submit\r\n                      </button>\r\n                    ) : (\r\n                      <button onClick={loginFreighter} className=\"submit-btn\">\r\n                        login\r\n                      </button>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default TransactionForm;\r\n","export const reducer = (state, action) => {\r\n  if (action.type === \"SUCCESS_SUBMIT_XDR\") {\r\n    return {\r\n      ...state,\r\n      isNotificationOpen: true,\r\n      notificationContent: \"Transaction Success\",\r\n      notificationColor: \"#2eb94c\",\r\n    };\r\n  } else if (action.type === \"CANNOT_SUBMIT_XDR\") {\r\n    return {\r\n      ...state,\r\n      isNotificationOpen: true,\r\n      notificationContent: \"Transaction Failed\",\r\n      notificationColor: \"#ec5f0d\",\r\n    };\r\n  } else if (action.type === \"NO_VALUE\") {\r\n    return {\r\n      ...state,\r\n      isNotificationOpen: true,\r\n      notificationContent:\r\n        \"Please Enter Amount Send, Asset Send, and Asset Receive\",\r\n      notificationColor: \"#ec5f0d\",\r\n    };\r\n  } else if (action.type === \"CHANGE_VALUE\") {\r\n    const { name, value } = action.payload;\r\n    if (name === \"assetSend\" || name === \"assetReceive\") {\r\n      const [newCode, newIssuer] = value.split(\"_\");\r\n      return {\r\n        ...state,\r\n        [name]: {\r\n          code: newCode,\r\n          issuer: newIssuer,\r\n        },\r\n      };\r\n    }\r\n    return {\r\n      ...state,\r\n      [name]: value,\r\n    };\r\n  } else if (action.type === \"ERROR_FETCH\") {\r\n    return {\r\n      ...state,\r\n      isNotificationOpen: true,\r\n      notificationContent: \"Error Retrieve Data\",\r\n      notificationColor: \"#ec5f0d\",\r\n    };\r\n  } else if (action.type === \"CLOSE_NOTIFICATION\") {\r\n    return {\r\n      ...state,\r\n      isNotificationOpen: false,\r\n      notificationContent: null,\r\n      notificationColor: null,\r\n    };\r\n  }\r\n};\r\n","export const defaultState = {\r\n  publicKey: null,\r\n  assetSend: null,\r\n  assetReceive: null,\r\n  amountSend: \"\",\r\n  amountReceive: \"\",\r\n  slippage: \"\",\r\n  xdr: null,\r\n  isNotificationOpen: false,\r\n  notificationContent: null,\r\n  notificationColor: null,\r\n};\r\n","import React, { useEffect, useReducer } from \"react\";\r\nimport Navbar from \"./Navbar\";\r\nimport TransactionForm from \"./TransactionForm\";\r\nimport { reducer } from \"./reducer\";\r\nimport { defaultState } from \"./defaultState\";\r\n\r\nimport axios from \"axios\";\r\nimport {\r\n  isConnected,\r\n  getPublicKey,\r\n  signTransaction,\r\n} from \"@stellar/freighter-api\";\r\nimport StellarSdk from \"stellar-sdk\";\r\nfunction App() {\r\n  const [state, dispatch] = useReducer(reducer, defaultState);\r\n  const {\r\n    publicKey,\r\n    assetSend,\r\n    assetReceive,\r\n    amountSend,\r\n    amountReceive,\r\n    slippage,\r\n  } = state;\r\n\r\n  const fetchUrl = async (url) => {\r\n    try {\r\n      const response = await axios.get(url);\r\n      const data = response.data;\r\n      return data;\r\n    } catch (e) {\r\n      console.log(e);\r\n      dispatch({ type: \"ERROR_FETCH\" });\r\n    }\r\n  };\r\n  const submitXDR = async (url) => {\r\n    try {\r\n      const data = await fetchUrl(url);\r\n      let xdr = data.xdr;\r\n      xdr = await signTransaction(xdr, \"TESTNET\");\r\n      const SERVER_URL = \"https://horizon-testnet.stellar.org\";\r\n      const server = new StellarSdk.Server(SERVER_URL);\r\n      const transactionToSubmit = StellarSdk.TransactionBuilder.fromXDR(\r\n        xdr,\r\n        SERVER_URL\r\n      );\r\n      const response = await server.submitTransaction(transactionToSubmit);\r\n      console.log(response);\r\n      dispatch({ type: \"SUCCESS_SUBMIT_XDR\" });\r\n    } catch {\r\n      dispatch({ type: \"CANNOT_SUBMIT_XDR\" });\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (\r\n      publicKey &&\r\n      assetSend &&\r\n      assetReceive &&\r\n      amountSend &&\r\n      amountReceive &&\r\n      slippage\r\n    ) {\r\n      let url = \"https://wy6y1k.deta.dev/fetch_xdr?\";\r\n      const params = [];\r\n      params[0] = `public_key=${publicKey}&`;\r\n      params[1] = `asset_send_code=${assetSend.code}&`;\r\n      params[2] = `asset_send_issuer=${assetSend.issuer}&`;\r\n      params[3] = `asset_receive_code=${assetReceive.code}&`;\r\n      params[4] = `asset_receive_issuer=${assetReceive.issuer}&`;\r\n      params[5] = `amount_send=${amountSend}&`;\r\n      params[6] = `slippage=${slippage}`;\r\n      params.forEach((param) => {\r\n        url += param;\r\n      });\r\n      submitXDR(url);\r\n    } else if (publicKey) {\r\n      dispatch({ type: \"NO_VALUE\" });\r\n    }\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const name = e.target.name;\r\n    let value = e.target.value;\r\n    if (\r\n      name === \"amountSend\" ||\r\n      name === \"amountReceive\" ||\r\n      name === \"slippage\"\r\n    ) {\r\n      if (value) {\r\n        value = parseFloat(value);\r\n      } else {\r\n        value = \"\";\r\n      }\r\n    }\r\n    dispatch({ type: \"CHANGE_VALUE\", payload: { name, value } });\r\n  };\r\n  const closeNotification = () => {\r\n    dispatch({ type: \"CLOSE_NOTIFICATION\" });\r\n  };\r\n\r\n  const loginFreighter = async () => {\r\n    let publicKey = \"\";\r\n    let error = \"\";\r\n\r\n    try {\r\n      publicKey = await getPublicKey();\r\n    } catch (e) {\r\n      error = e;\r\n    }\r\n\r\n    if (error) {\r\n      return error;\r\n    }\r\n    const name = \"publicKey\";\r\n    const value = publicKey;\r\n    dispatch({ type: \"CHANGE_VALUE\", payload: { name, value } });\r\n  };\r\n\r\n  const getAmountReceive = async (url) => {\r\n    const name = \"amountReceive\";\r\n    const value = await fetchUrl(url).then((data) => {\r\n      return data.amount_receive;\r\n    });\r\n    dispatch({\r\n      type: \"CHANGE_VALUE\",\r\n      payload: { name, value },\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (amountSend && assetSend && assetReceive) {\r\n      let url = \"https://wy6y1k.deta.dev/fetch_amount_receive?\";\r\n      const params = [];\r\n      params[0] = `asset_send_code=${assetSend.code}&`;\r\n      params[1] = `asset_send_issuer=${assetSend.issuer}&`;\r\n      params[2] = `asset_receive_code=${assetReceive.code}&`;\r\n      params[3] = `asset_receive_issuer=${assetReceive.issuer}&`;\r\n      params[4] = `amount_send=${amountSend}`;\r\n      params.forEach((param) => {\r\n        url += param;\r\n      });\r\n      getAmountReceive(url);\r\n      const interval = setInterval(() => {\r\n        getAmountReceive(url);\r\n      }, 10000);\r\n\r\n      return () => clearInterval(interval);\r\n    } else if (!amountSend) {\r\n      const name = \"amountReceive\";\r\n      const value = \"\";\r\n      dispatch({\r\n        type: \"CHANGE_VALUE\",\r\n        payload: { name, value },\r\n      });\r\n    }\r\n  }, [amountSend, assetSend, assetReceive]);\r\n  return (\r\n    <React.Fragment>\r\n      <Navbar publicKey={publicKey} />\r\n      {/* {isModalOpen && (\r\n        <Modal closeModal={closeModal} modalContent={modalContent} />\r\n      )} */}\r\n      <TransactionForm\r\n        state={state}\r\n        handleSubmit={handleSubmit}\r\n        handleChange={handleChange}\r\n        loginFreighter={loginFreighter}\r\n        closeNotification={closeNotification}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}